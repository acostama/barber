{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Barber\ud83d\udc88 \u00b6 A type safe Kotlin JVM library for building up localized, fillable, themed documents using Mustache templating. Why? \u00b6 An application will often have hundreds of user viewable strings to power UI, notifications, emails, and other text based user interactions. This leads to many questions about the how to achieve the desired functionality of these user viewable strings: These strings may want to be personalizable! Thus the string would now have to be a template that can render with a data blob unique to each user to produce a personalized string. How can we check that the fillable openings in templates have corresponding values in the data blob? How can templates and data blobs be validated at compile time to protect against runtime exceptions or user visible bugs? What if we want to pass around not just a single template string, but a collection of template strings for more complex documents? How could we support emails that have a subject, body, recipient, primary button\u2026? What about different languages? Could the same unique data blob could be used to support templates in different languages? What about time or money that differ between countries that even share the same language (ie. 12 vs 24 hour time)? How could that formatting localization be provided? To answer the above questions, we built Barber\ud83d\udc88. A type safe Kotlin JVM library for building up localized, fillable, themed documents using Mustache templating. Getting Started \u00b6 To get started using Barber, skim below to understand the different elements used to safely render your localized, fillable, themed documents using Mustache templating. Gradle/Maven Artifact \u00b6 Barber is not yet published publicly. API is subject to change. DocumentData \u00b6 DocumentData is the data that is used to render a template. In Barber, this is defined as a data class making it easy to use in Kotlin. // Define DocumentData data class RecipientReceipt ( val sender : String , val amount : String , val cancelUrl : String , val deposit_expected_at : Instant ) : DocumentData To render a template, for example \"{{sender}} sent you {{amount}}\" , an instance of the above DocumentData could be passed in to fill the fillable openings in the template. Document \u00b6 The final fields of the output, rendered document. For simple documents, this may be a single field. // Define Document data class TransactionalSmsDocument ( val sms_body : String ) : Document For more complex documents that may be used in further processing, there may be multiple fields, which can be nullable. data class TransactionalEmailDocument ( val subject : String , val headline : String , val short_description : String , val primary_button : String ?, val primary_button_url : String ?, val secondary_button : String ?, val secondary_button_url : String ? ) : Document DocumentTemplate \u00b6 A DocumentTemplate is the glue that connects the DocumentData to the Document. It contains: - fields: - keys fulfill all the non-nullable keys of the Document targets - values are Mustache templates that are rendered with the passed in source DocumentData - source: DocumentData that can support all fillable templates in fields - targets: Document s that the DocumentTemplate can render to - locale: Locale for the language of the fields templates val recipientReceiptSmsDocumentTemplateEN_US = DocumentTemplate ( fields = mapOf ( \"sms_body\" to \"{{sender}} sent you {{amount}}\" ), source = RecipientReceipt :: class , targets = setOf ( TransactionalSmsDocument :: class ), locale = Locale . EN_US ) Barber \u00b6 A Barber is typed to the DocumentData -> Document relationship that it knows how to render. Amy knows how to cut blonde hair into a Fu Manchu mustache. Joe knows how to trim brown hair into a soul patch mustache. // A Barber who knows how to render RecipientReceipt data into a TransactionalSmsDocument val recipientReceiptSms : Barber < RecipientReceipt , TransactionalSmsDocument > Barbershop \u00b6 A Barbershop contains all possible Barbers based on the installed DocumentData , DocumentTemplate , and Document s. Each Barber knows how to handle a different combination of DocumentData -> Document . You can call barbershop.getBarber<RecipientReceipt, TransactionalSmsDocument>() to get the Barber that can handle rendering a RecipientReceipt into a TransactionalSmsDocument . // Get a Barber who knows how to render RecipientReceipt data into a TransactionalSmsDocument val recipientReceiptSms = barbershop . getBarber < RecipientReceipt , TransactionalSmsDocument >() You want a soul patch and have brown hair, get Joe! You want a Fu Manchu and have blonde hair, get Amy! You can also get a Map of all Barbers using barbershop.getAllBarbers() . // Get all Barbers val allBarbers : Map < BarberKey , Barber < DocumentData , Document >> = barbershop . getAllBarbers () Note: BarberKey is a data class that let\u2019s us lookup by both DocumentData and Document . BarbershopBuilder \u00b6 A Java style Builder that installs all of the above Barber elements and returns a pre-compiled and validated Barbershop. Install DocumentData and DocumentTemplate pairs with .installDocumentTemplate<RecipientReceipt>(recipientReceiptSmsDocumentTemplateEN_US) . Install Document with .installDocument<TransactionalSmsDocument>() Set a custom LocaleResolver with .setLocaleResolver(MapleSyrupOrFirstLocaleResolver()) Return the finished Barbershop with .build() as the final method call on BarbershopBuilder. val barbershop = BarbershopBuilder () . installDocumentTemplate < RecipientReceipt >( recipientReceiptSmsDocumentTemplateEN_US ) . installDocument < TransactionalSmsDocument >() . build () Barber .render(data: DocumentData, locale: Locale) \u00b6 To render the final Document , a Barber requires a DocumentData , used to fill the DocumentTemplate , and an output Locale. First, the Barber uses a LocaleResolver to find the best Locale match from installed DocumentTemplate s. Then, using the Locale resolved DocumentTemplate , Barber renders the fields of DocumentTemplate using the passed in DocumentData . Returned is the requested Document rendered with the personalized values of DocumentData in the closest match to the requested Locale. // Get a Barber who knows how to render RecipientReceipt data into a TransactionalSmsDocument val recipientReceiptSms = barbershop . getBarber < RecipientReceipt , TransactionalSmsDocument >() // Create the RecipientReceipt instance that holds the personalized data val sandy50Receipt = RecipientReceipt ( sender = \"Sandy Winchester\" , amount = \"$50\" , cancelUrl = \"https://cash.app/cancel/123\" , deposit_expected_at = Instant . parse ( \"2019-05-21T16:02:00.00Z\" ) ) // Render the final document using the personalized DocumentData instance and the output Locale val renderedSms = recipientReceiptSms . render ( sandy50Receipt , EN_US ) Locale \u00b6 Barber supports installation and resolution of multiple Locales for each DocumentTemplate . All Locale versions of a DocumentTemplate will be installed with the BarbershopBuilder. The desired output Locale is then provided at render time and the best available option is resolved. // Define DocumentTemplate in English val recipientReceiptSmsDocumentTemplateEN_US = DocumentTemplate ( fields = mapOf ( \"sms_body\" to \"{{sender}} sent you {{amount}}\" ), source = RecipientReceipt :: class , targets = setOf ( TransactionalSmsDocument :: class ), locale = Locale . EN_US ) // Define DocumentTemplate in Canadian English val recipientReceiptSmsDocumentTemplateEN_CA = DocumentTemplate ( fields = mapOf ( \"sms_body\" to \"{{sender}} sent you {{amount}}, eh!\" ), // ... same as EN_US locale = Locale . EN_CA ) // Define DocumentTemplate in Spanish val recipientReceiptSmsDocumentTemplateES_US = DocumentTemplate ( fields = mapOf ( \"sms_body\" to \"{{sender}} te envio {{amount}}\" ), // ... same as EN_US locale = Locale . ES_US ) // Use above elements to build a Barbershop val barbershop = BarbershopBuilder () . installDocumentTemplate < RecipientReceipt >( recipientReceiptSmsDocumentTemplateEN_US ) . installDocumentTemplate < RecipientReceipt >( recipientReceiptSmsDocumentTemplateEN_CA ) . installDocumentTemplate < RecipientReceipt >( recipientReceiptSmsDocumentTemplateES_US ) . installDocument < TransactionalSmsDocument >() . build () // Get a Barber who knows how to render RecipientReceipt data into a TransactionalSmsDocument val recipientReceiptSms = barbershop . getBarber < RecipientReceipt , TransactionalSmsDocument >() // Render in each Locale val smsEN_US = recipientReceiptSms . render ( sandy50Receipt , EN_US ) // = Sandy Winchester sent you $50 val smsEN_CA = recipientReceiptSms . render ( sandy50Receipt , EN_CA ) // = Sandy Winchester sent you $50, eh? val smsES_US = recipientReceiptSms . render ( sandy50Receipt , ES_US ) // = Sandy Winchester te envio $50 LocaleResolver \u00b6 Determining based on a Locale passed in at render which installed Locale to render is done by a LocaleResolver. It is a simple interface that looks like this: interface LocaleResolver { /** * @return a [Locale] from the given [options] * @param [options] must be valid keys for a Locale keyed Map */ fun resolve ( locale : Locale , options : Set < Locale >): Locale } Barber comes with a very simple MatchOrFirstLocaleResolver that attempts to resolve the requested Locale exactly, and otherwise fallsback to the first installed Locale. For more complex resolving algorithms, you can set your own custom LocaleResolver when building your Barbershop. val barbershop = BarbershopBuilder () // ... . setLocaleResolver ( MapleSyrupOrFirstLocaleResolver ()) // Always tries to resolve EN_CA . build () Integration with Guice \u00b6 If you use Guice, creating a module that automatically binds all possible typed Barber instances is simple. See the code example below. package com.your.service.package import com.google.inject.AbstractModule import com.google.inject.Key import com.google.inject.util.Types import app.cash.barber.Barber import app.cash.barber.Barbershop import app.cash.barber.models.BarberKey import app.cash.barber.models.Document import app.cash.barber.models.DocumentData /** * Binds all the barbers so they may be injected directly like so: * * ``` * @Inject var barber: Barber<RecipientReceipt, TransactionalSmsDocument> * ``` */ class BarberModule ( private val barbershop : Barbershop ) : AbstractModule () { override fun configure () { barbershop . getAllBarbers (). forEach { ( barberKey , barber ) -> bind ( barberKey . asGuiceKey ()). toInstance ( barber ) } } private fun BarberKey . asGuiceKey (): Key < Barber < DocumentData , Document >> { val barberType = Types . newParameterizedType ( Barber :: class . java , documentData . java , document . java ) @Suppress ( \"UNCHECKED_CAST\" ) // We know this cast is safe dynamically. return Key . get ( barberType ) as Key < Barber < DocumentData , Document >> } } Coming Soon \u00b6 FieldStemming \u00b6 Automatically replace Money, DateTime, and Instant types with BarberMoney, BarberDateTime, and BarberInstant that let templates call out localized formatted output of each type. Example BarberInstant(Instant(2019-05-15T15:23:11), EN_US) = mapOf( \"date\" to \"May 15, 2019\", \"time\" to \"3:23 pm\", \"casual\" to \"tomorrow at 3pm\" ) BarberMoney(Money(50_00), EN_US) = mapOf( \"full\" to \"$50.00\" \"casual\" to \"$50\" ) Releases \u00b6 Our change log has release history. implementation ( \"app.cash.barber:barber:0.1.0\" ) Snapshot builds are available . License \u00b6 Copyright 2019 Square, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#barber","text":"A type safe Kotlin JVM library for building up localized, fillable, themed documents using Mustache templating.","title":"Barber\ud83d\udc88"},{"location":"#why","text":"An application will often have hundreds of user viewable strings to power UI, notifications, emails, and other text based user interactions. This leads to many questions about the how to achieve the desired functionality of these user viewable strings: These strings may want to be personalizable! Thus the string would now have to be a template that can render with a data blob unique to each user to produce a personalized string. How can we check that the fillable openings in templates have corresponding values in the data blob? How can templates and data blobs be validated at compile time to protect against runtime exceptions or user visible bugs? What if we want to pass around not just a single template string, but a collection of template strings for more complex documents? How could we support emails that have a subject, body, recipient, primary button\u2026? What about different languages? Could the same unique data blob could be used to support templates in different languages? What about time or money that differ between countries that even share the same language (ie. 12 vs 24 hour time)? How could that formatting localization be provided? To answer the above questions, we built Barber\ud83d\udc88. A type safe Kotlin JVM library for building up localized, fillable, themed documents using Mustache templating.","title":"Why?"},{"location":"#getting-started","text":"To get started using Barber, skim below to understand the different elements used to safely render your localized, fillable, themed documents using Mustache templating.","title":"Getting Started"},{"location":"#gradlemaven-artifact","text":"Barber is not yet published publicly. API is subject to change.","title":"Gradle/Maven Artifact"},{"location":"#documentdata","text":"DocumentData is the data that is used to render a template. In Barber, this is defined as a data class making it easy to use in Kotlin. // Define DocumentData data class RecipientReceipt ( val sender : String , val amount : String , val cancelUrl : String , val deposit_expected_at : Instant ) : DocumentData To render a template, for example \"{{sender}} sent you {{amount}}\" , an instance of the above DocumentData could be passed in to fill the fillable openings in the template.","title":"DocumentData"},{"location":"#document","text":"The final fields of the output, rendered document. For simple documents, this may be a single field. // Define Document data class TransactionalSmsDocument ( val sms_body : String ) : Document For more complex documents that may be used in further processing, there may be multiple fields, which can be nullable. data class TransactionalEmailDocument ( val subject : String , val headline : String , val short_description : String , val primary_button : String ?, val primary_button_url : String ?, val secondary_button : String ?, val secondary_button_url : String ? ) : Document","title":"Document"},{"location":"#documenttemplate","text":"A DocumentTemplate is the glue that connects the DocumentData to the Document. It contains: - fields: - keys fulfill all the non-nullable keys of the Document targets - values are Mustache templates that are rendered with the passed in source DocumentData - source: DocumentData that can support all fillable templates in fields - targets: Document s that the DocumentTemplate can render to - locale: Locale for the language of the fields templates val recipientReceiptSmsDocumentTemplateEN_US = DocumentTemplate ( fields = mapOf ( \"sms_body\" to \"{{sender}} sent you {{amount}}\" ), source = RecipientReceipt :: class , targets = setOf ( TransactionalSmsDocument :: class ), locale = Locale . EN_US )","title":"DocumentTemplate"},{"location":"#barber_1","text":"A Barber is typed to the DocumentData -> Document relationship that it knows how to render. Amy knows how to cut blonde hair into a Fu Manchu mustache. Joe knows how to trim brown hair into a soul patch mustache. // A Barber who knows how to render RecipientReceipt data into a TransactionalSmsDocument val recipientReceiptSms : Barber < RecipientReceipt , TransactionalSmsDocument >","title":"Barber"},{"location":"#barbershop","text":"A Barbershop contains all possible Barbers based on the installed DocumentData , DocumentTemplate , and Document s. Each Barber knows how to handle a different combination of DocumentData -> Document . You can call barbershop.getBarber<RecipientReceipt, TransactionalSmsDocument>() to get the Barber that can handle rendering a RecipientReceipt into a TransactionalSmsDocument . // Get a Barber who knows how to render RecipientReceipt data into a TransactionalSmsDocument val recipientReceiptSms = barbershop . getBarber < RecipientReceipt , TransactionalSmsDocument >() You want a soul patch and have brown hair, get Joe! You want a Fu Manchu and have blonde hair, get Amy! You can also get a Map of all Barbers using barbershop.getAllBarbers() . // Get all Barbers val allBarbers : Map < BarberKey , Barber < DocumentData , Document >> = barbershop . getAllBarbers () Note: BarberKey is a data class that let\u2019s us lookup by both DocumentData and Document .","title":"Barbershop"},{"location":"#barbershopbuilder","text":"A Java style Builder that installs all of the above Barber elements and returns a pre-compiled and validated Barbershop. Install DocumentData and DocumentTemplate pairs with .installDocumentTemplate<RecipientReceipt>(recipientReceiptSmsDocumentTemplateEN_US) . Install Document with .installDocument<TransactionalSmsDocument>() Set a custom LocaleResolver with .setLocaleResolver(MapleSyrupOrFirstLocaleResolver()) Return the finished Barbershop with .build() as the final method call on BarbershopBuilder. val barbershop = BarbershopBuilder () . installDocumentTemplate < RecipientReceipt >( recipientReceiptSmsDocumentTemplateEN_US ) . installDocument < TransactionalSmsDocument >() . build ()","title":"BarbershopBuilder"},{"location":"#barberrenderdata-documentdata-locale-locale","text":"To render the final Document , a Barber requires a DocumentData , used to fill the DocumentTemplate , and an output Locale. First, the Barber uses a LocaleResolver to find the best Locale match from installed DocumentTemplate s. Then, using the Locale resolved DocumentTemplate , Barber renders the fields of DocumentTemplate using the passed in DocumentData . Returned is the requested Document rendered with the personalized values of DocumentData in the closest match to the requested Locale. // Get a Barber who knows how to render RecipientReceipt data into a TransactionalSmsDocument val recipientReceiptSms = barbershop . getBarber < RecipientReceipt , TransactionalSmsDocument >() // Create the RecipientReceipt instance that holds the personalized data val sandy50Receipt = RecipientReceipt ( sender = \"Sandy Winchester\" , amount = \"$50\" , cancelUrl = \"https://cash.app/cancel/123\" , deposit_expected_at = Instant . parse ( \"2019-05-21T16:02:00.00Z\" ) ) // Render the final document using the personalized DocumentData instance and the output Locale val renderedSms = recipientReceiptSms . render ( sandy50Receipt , EN_US )","title":"Barber.render(data: DocumentData, locale: Locale)"},{"location":"#locale","text":"Barber supports installation and resolution of multiple Locales for each DocumentTemplate . All Locale versions of a DocumentTemplate will be installed with the BarbershopBuilder. The desired output Locale is then provided at render time and the best available option is resolved. // Define DocumentTemplate in English val recipientReceiptSmsDocumentTemplateEN_US = DocumentTemplate ( fields = mapOf ( \"sms_body\" to \"{{sender}} sent you {{amount}}\" ), source = RecipientReceipt :: class , targets = setOf ( TransactionalSmsDocument :: class ), locale = Locale . EN_US ) // Define DocumentTemplate in Canadian English val recipientReceiptSmsDocumentTemplateEN_CA = DocumentTemplate ( fields = mapOf ( \"sms_body\" to \"{{sender}} sent you {{amount}}, eh!\" ), // ... same as EN_US locale = Locale . EN_CA ) // Define DocumentTemplate in Spanish val recipientReceiptSmsDocumentTemplateES_US = DocumentTemplate ( fields = mapOf ( \"sms_body\" to \"{{sender}} te envio {{amount}}\" ), // ... same as EN_US locale = Locale . ES_US ) // Use above elements to build a Barbershop val barbershop = BarbershopBuilder () . installDocumentTemplate < RecipientReceipt >( recipientReceiptSmsDocumentTemplateEN_US ) . installDocumentTemplate < RecipientReceipt >( recipientReceiptSmsDocumentTemplateEN_CA ) . installDocumentTemplate < RecipientReceipt >( recipientReceiptSmsDocumentTemplateES_US ) . installDocument < TransactionalSmsDocument >() . build () // Get a Barber who knows how to render RecipientReceipt data into a TransactionalSmsDocument val recipientReceiptSms = barbershop . getBarber < RecipientReceipt , TransactionalSmsDocument >() // Render in each Locale val smsEN_US = recipientReceiptSms . render ( sandy50Receipt , EN_US ) // = Sandy Winchester sent you $50 val smsEN_CA = recipientReceiptSms . render ( sandy50Receipt , EN_CA ) // = Sandy Winchester sent you $50, eh? val smsES_US = recipientReceiptSms . render ( sandy50Receipt , ES_US ) // = Sandy Winchester te envio $50","title":"Locale"},{"location":"#localeresolver","text":"Determining based on a Locale passed in at render which installed Locale to render is done by a LocaleResolver. It is a simple interface that looks like this: interface LocaleResolver { /** * @return a [Locale] from the given [options] * @param [options] must be valid keys for a Locale keyed Map */ fun resolve ( locale : Locale , options : Set < Locale >): Locale } Barber comes with a very simple MatchOrFirstLocaleResolver that attempts to resolve the requested Locale exactly, and otherwise fallsback to the first installed Locale. For more complex resolving algorithms, you can set your own custom LocaleResolver when building your Barbershop. val barbershop = BarbershopBuilder () // ... . setLocaleResolver ( MapleSyrupOrFirstLocaleResolver ()) // Always tries to resolve EN_CA . build ()","title":"LocaleResolver"},{"location":"#integration-with-guice","text":"If you use Guice, creating a module that automatically binds all possible typed Barber instances is simple. See the code example below. package com.your.service.package import com.google.inject.AbstractModule import com.google.inject.Key import com.google.inject.util.Types import app.cash.barber.Barber import app.cash.barber.Barbershop import app.cash.barber.models.BarberKey import app.cash.barber.models.Document import app.cash.barber.models.DocumentData /** * Binds all the barbers so they may be injected directly like so: * * ``` * @Inject var barber: Barber<RecipientReceipt, TransactionalSmsDocument> * ``` */ class BarberModule ( private val barbershop : Barbershop ) : AbstractModule () { override fun configure () { barbershop . getAllBarbers (). forEach { ( barberKey , barber ) -> bind ( barberKey . asGuiceKey ()). toInstance ( barber ) } } private fun BarberKey . asGuiceKey (): Key < Barber < DocumentData , Document >> { val barberType = Types . newParameterizedType ( Barber :: class . java , documentData . java , document . java ) @Suppress ( \"UNCHECKED_CAST\" ) // We know this cast is safe dynamically. return Key . get ( barberType ) as Key < Barber < DocumentData , Document >> } }","title":"Integration with Guice"},{"location":"#coming-soon","text":"","title":"Coming Soon"},{"location":"#fieldstemming","text":"Automatically replace Money, DateTime, and Instant types with BarberMoney, BarberDateTime, and BarberInstant that let templates call out localized formatted output of each type. Example BarberInstant(Instant(2019-05-15T15:23:11), EN_US) = mapOf( \"date\" to \"May 15, 2019\", \"time\" to \"3:23 pm\", \"casual\" to \"tomorrow at 3pm\" ) BarberMoney(Money(50_00), EN_US) = mapOf( \"full\" to \"$50.00\" \"casual\" to \"$50\" )","title":"FieldStemming"},{"location":"#releases","text":"Our change log has release history. implementation ( \"app.cash.barber:barber:0.1.0\" ) Snapshot builds are available .","title":"Releases"},{"location":"#license","text":"Copyright 2019 Square, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"changelog/","text":"Change Log \u00b6 Version 0.1.0 \u00b6 2019-07-16 Initial release.","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-010","text":"2019-07-16 Initial release.","title":"Version 0.1.0"},{"location":"releasing/","text":"Releasing \u00b6 Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Update, build, and upload: sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\ gradle.properties sed -i \"\" \\ \"s/\\\"app.cash.barber:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"app.cash.barber:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -name \"README.md\"` ./gradlew clean uploadArchives Visit Sonatype Nexus to promote (close then release) the artifact. Or drop it if there is a problem! Tag the release, prepare for the next one, and push to GitHub. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a barber-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\" sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\ gradle.properties git commit -am \"Prepare next development version.\" git push && git push --tags Prerequisites \u00b6 Generate a GPG key (RSA, 4096 bit, 3650 day) expiry, or use an existing one. $ gpg --full-generate-key Upload the GPG keys to public servers $ gpg --list-keys --keyid-format LONG /Users/johnbarber/.gnupg/pubring.kbx ------------------------------ pub rsa4096/XXXXXXXXXXXXXXXX 2019-07-16 [SC] [expires: 2029-07-13] YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY uid [ultimate] John Barber <jbarber@cash.app> sub rsa4096/ZZZZZZZZZZZZZZZZ 2019-07-16 [E] [expires: 2029-07-13] $ gpg --send-keys --keyserver keyserver.ubuntu.com XXXXXXXXXXXXXXXX In ~/.gradle/gradle.properties , set the following: SONATYPE_NEXUS_USERNAME - Sonatype username for releasing to app.cash . SONATYPE_NEXUS_PASSWORD - Sonatype password for releasing to app.cash . signing.keyId - key ID for GPG key. Example: 1A2345F8 . Get with the following command: $ gpg --list-keys --keyid-format SHORT signing.password - password for GPG key, recommended to be empty. signing.secretKeyRingFile - absoluate file path for secring.gpg . Example: /Users/johnbarber/.gnupg/secring.gpg . You may need to export this file manually with the following command where XXXXXXXX is the same keyId as above: $ gpg --keyring secring.gpg --export-secret-key XXXXXXXX > ~/.gnupg/secring.gpg","title":"Releasing"},{"location":"releasing/#releasing","text":"Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Update, build, and upload: sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\ gradle.properties sed -i \"\" \\ \"s/\\\"app.cash.barber:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"app.cash.barber:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -name \"README.md\"` ./gradlew clean uploadArchives Visit Sonatype Nexus to promote (close then release) the artifact. Or drop it if there is a problem! Tag the release, prepare for the next one, and push to GitHub. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a barber-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\" sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\ gradle.properties git commit -am \"Prepare next development version.\" git push && git push --tags","title":"Releasing"},{"location":"releasing/#prerequisites","text":"Generate a GPG key (RSA, 4096 bit, 3650 day) expiry, or use an existing one. $ gpg --full-generate-key Upload the GPG keys to public servers $ gpg --list-keys --keyid-format LONG /Users/johnbarber/.gnupg/pubring.kbx ------------------------------ pub rsa4096/XXXXXXXXXXXXXXXX 2019-07-16 [SC] [expires: 2029-07-13] YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY uid [ultimate] John Barber <jbarber@cash.app> sub rsa4096/ZZZZZZZZZZZZZZZZ 2019-07-16 [E] [expires: 2029-07-13] $ gpg --send-keys --keyserver keyserver.ubuntu.com XXXXXXXXXXXXXXXX In ~/.gradle/gradle.properties , set the following: SONATYPE_NEXUS_USERNAME - Sonatype username for releasing to app.cash . SONATYPE_NEXUS_PASSWORD - Sonatype password for releasing to app.cash . signing.keyId - key ID for GPG key. Example: 1A2345F8 . Get with the following command: $ gpg --list-keys --keyid-format SHORT signing.password - password for GPG key, recommended to be empty. signing.secretKeyRingFile - absoluate file path for secring.gpg . Example: /Users/johnbarber/.gnupg/secring.gpg . You may need to export this file manually with the following command where XXXXXXXX is the same keyId as above: $ gpg --keyring secring.gpg --export-secret-key XXXXXXXX > ~/.gnupg/secring.gpg","title":"Prerequisites"},{"location":"0.x/barber/","text":"barber Packages \u00b6 Name Summary app.cash.barber app.cash.barber.models Index \u00b6 All Types","title":"Home"},{"location":"0.x/barber/#packages","text":"Name Summary app.cash.barber app.cash.barber.models","title":"Packages"},{"location":"0.x/barber/#index","text":"All Types","title":"Index"},{"location":"0.x/barber/alltypes/","text":"All Types \u00b6 Name Summary app.cash.barber.Barber app.cash.barber.BarberException app.cash.barber.models.BarberKey app.cash.barber.Barbershop Holds validated elements that have eagerly built Barbers between type DocumentData and Document app.cash.barber.BarbershopBuilder app.cash.barber.models.CompiledDocumentTemplate An intermediary data class used in processing DocumentTemplate that permits for null values in fields and pre-compilation of Mustache templates in fields. This allows for a CompiledDocumentTemplate .fields to contain the same keys as the target Document (even for Document keys that are nullable) and improve Mustache execution runtime. app.cash.barber.models.Document This is a UI object that has the user-presented strings of a document. app.cash.barber.models.DocumentData This is a schema that specifies the input values for a DocumentTemplate template. app.cash.barber.models.DocumentTemplate For each DocumentData we have a DocumentTemplate that provides a natural language for the document. It uses Mustache templates to provide openings for the DocumentData fields. app.cash.barber.models.HtmlString A wrapper around a String that contains HTML content that should not be escaped when rendered By default and for safety, all Strings are escaped. app.cash.barber.models.Locale Container for locale string Also has aliases for easier locale use in code app.cash.barber.LocaleResolver app.cash.barber.MatchOrFirstLocaleResolver app.cash.barber.RealBarber","title":"Home"},{"location":"0.x/barber/alltypes/#all-types","text":"Name Summary app.cash.barber.Barber app.cash.barber.BarberException app.cash.barber.models.BarberKey app.cash.barber.Barbershop Holds validated elements that have eagerly built Barbers between type DocumentData and Document app.cash.barber.BarbershopBuilder app.cash.barber.models.CompiledDocumentTemplate An intermediary data class used in processing DocumentTemplate that permits for null values in fields and pre-compilation of Mustache templates in fields. This allows for a CompiledDocumentTemplate .fields to contain the same keys as the target Document (even for Document keys that are nullable) and improve Mustache execution runtime. app.cash.barber.models.Document This is a UI object that has the user-presented strings of a document. app.cash.barber.models.DocumentData This is a schema that specifies the input values for a DocumentTemplate template. app.cash.barber.models.DocumentTemplate For each DocumentData we have a DocumentTemplate that provides a natural language for the document. It uses Mustache templates to provide openings for the DocumentData fields. app.cash.barber.models.HtmlString A wrapper around a String that contains HTML content that should not be escaped when rendered By default and for safety, all Strings are escaped. app.cash.barber.models.Locale Container for locale string Also has aliases for easier locale use in code app.cash.barber.LocaleResolver app.cash.barber.MatchOrFirstLocaleResolver app.cash.barber.RealBarber","title":"All Types"},{"location":"0.x/barber/app.cash.barber/","text":"barber / app.cash.barber Package app.cash.barber \u00b6 Types \u00b6 Name Summary Barber interface Barber<C : DocumentData , D : Document > Barbershop interface Barbershop Holds validated elements that have eagerly built Barbers between type DocumentData and Document BarbershopBuilder class BarbershopBuilder : Builder LocaleResolver interface LocaleResolver MatchOrFirstLocaleResolver class MatchOrFirstLocaleResolver : LocaleResolver RealBarber class RealBarber<C : DocumentData , D : Document > : Barber < C , D > Exceptions \u00b6 Name Summary BarberException class BarberException : IllegalStateException Functions \u00b6 Name Summary getBarber fun <DD : DocumentData , D : Document > Barbershop .getBarber(): Barber < DD , D >","title":"Home"},{"location":"0.x/barber/app.cash.barber/#package-appcashbarber","text":"","title":"Package app.cash.barber"},{"location":"0.x/barber/app.cash.barber/#types","text":"Name Summary Barber interface Barber<C : DocumentData , D : Document > Barbershop interface Barbershop Holds validated elements that have eagerly built Barbers between type DocumentData and Document BarbershopBuilder class BarbershopBuilder : Builder LocaleResolver interface LocaleResolver MatchOrFirstLocaleResolver class MatchOrFirstLocaleResolver : LocaleResolver RealBarber class RealBarber<C : DocumentData , D : Document > : Barber < C , D >","title":"Types"},{"location":"0.x/barber/app.cash.barber/#exceptions","text":"Name Summary BarberException class BarberException : IllegalStateException","title":"Exceptions"},{"location":"0.x/barber/app.cash.barber/#functions","text":"Name Summary getBarber fun <DD : DocumentData , D : Document > Barbershop .getBarber(): Barber < DD , D >","title":"Functions"},{"location":"0.x/barber/app.cash.barber/get-barber/","text":"barber / app.cash.barber / getBarber getBarber \u00b6 inline fun <reified DD : DocumentData , reified D : Document > Barbershop .getBarber(): Barber < DD , D >","title":"Get barber"},{"location":"0.x/barber/app.cash.barber/get-barber/#getbarber","text":"inline fun <reified DD : DocumentData , reified D : Document > Barbershop .getBarber(): Barber < DD , D >","title":"getBarber"},{"location":"0.x/barber/app.cash.barber/-barber/","text":"barber / app.cash.barber / Barber Barber \u00b6 interface Barber<C : DocumentData , D : Document > Functions \u00b6 Name Summary render abstract fun render(documentData: C , locale: Locale ): D Inheritors \u00b6 Name Summary RealBarber class RealBarber<C : DocumentData , D : Document > : Barber < C , D >","title":"Home"},{"location":"0.x/barber/app.cash.barber/-barber/#barber","text":"interface Barber<C : DocumentData , D : Document >","title":"Barber"},{"location":"0.x/barber/app.cash.barber/-barber/#functions","text":"Name Summary render abstract fun render(documentData: C , locale: Locale ): D","title":"Functions"},{"location":"0.x/barber/app.cash.barber/-barber/#inheritors","text":"Name Summary RealBarber class RealBarber<C : DocumentData , D : Document > : Barber < C , D >","title":"Inheritors"},{"location":"0.x/barber/app.cash.barber/-barber/render/","text":"barber / app.cash.barber / Barber / render render \u00b6 abstract fun render(documentData: C , locale: Locale ): D Return a Document with the values of a DocumentData instance rendered in the DocumentTemplate","title":"Render"},{"location":"0.x/barber/app.cash.barber/-barber/render/#render","text":"abstract fun render(documentData: C , locale: Locale ): D Return a Document with the values of a DocumentData instance rendered in the DocumentTemplate","title":"render"},{"location":"0.x/barber/app.cash.barber/-barber-exception/","text":"barber / app.cash.barber / BarberException BarberException \u00b6 class BarberException : IllegalStateException Return problems: a list of Strings describing the error Can point to multiple problems Example |output field \u2018subject\u2019 uses \u2018totally_invalid_field\u2019 but \u2018RecipientReceipt\u2019 has no such field | {sender} sent you {totally_invalid_field} | valid fields are: sender, amount, cancelUrl, deposit_expected_at TODO make exceptions typed so the above example could be parsed by a client and show rich feedback for DocumentTemplate writers Constructors \u00b6 Name Summary <init> BarberException(problems: List < String >) Properties \u00b6 Name Summary problems val problems: List < String > Functions \u00b6 Name Summary toString fun toString(): String","title":"Home"},{"location":"0.x/barber/app.cash.barber/-barber-exception/#barberexception","text":"class BarberException : IllegalStateException Return problems: a list of Strings describing the error Can point to multiple problems Example |output field \u2018subject\u2019 uses \u2018totally_invalid_field\u2019 but \u2018RecipientReceipt\u2019 has no such field | {sender} sent you {totally_invalid_field} | valid fields are: sender, amount, cancelUrl, deposit_expected_at TODO make exceptions typed so the above example could be parsed by a client and show rich feedback for DocumentTemplate writers","title":"BarberException"},{"location":"0.x/barber/app.cash.barber/-barber-exception/#constructors","text":"Name Summary <init> BarberException(problems: List < String >)","title":"Constructors"},{"location":"0.x/barber/app.cash.barber/-barber-exception/#properties","text":"Name Summary problems val problems: List < String >","title":"Properties"},{"location":"0.x/barber/app.cash.barber/-barber-exception/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"0.x/barber/app.cash.barber/-barber-exception/-init-/","text":"barber / app.cash.barber / BarberException / <init> <init> \u00b6 BarberException(problems: List < String >) Return problems: a list of Strings describing the error Can point to multiple problems Example |output field \u2018subject\u2019 uses \u2018totally_invalid_field\u2019 but \u2018RecipientReceipt\u2019 has no such field | {sender} sent you {totally_invalid_field} | valid fields are: sender, amount, cancelUrl, deposit_expected_at TODO make exceptions typed so the above example could be parsed by a client and show rich feedback for DocumentTemplate writers","title":" init "},{"location":"0.x/barber/app.cash.barber/-barber-exception/-init-/#init","text":"BarberException(problems: List < String >) Return problems: a list of Strings describing the error Can point to multiple problems Example |output field \u2018subject\u2019 uses \u2018totally_invalid_field\u2019 but \u2018RecipientReceipt\u2019 has no such field | {sender} sent you {totally_invalid_field} | valid fields are: sender, amount, cancelUrl, deposit_expected_at TODO make exceptions typed so the above example could be parsed by a client and show rich feedback for DocumentTemplate writers","title":"&lt;init&gt;"},{"location":"0.x/barber/app.cash.barber/-barber-exception/problems/","text":"barber / app.cash.barber / BarberException / problems problems \u00b6 val problems: List < String >","title":"Problems"},{"location":"0.x/barber/app.cash.barber/-barber-exception/problems/#problems","text":"val problems: List < String >","title":"problems"},{"location":"0.x/barber/app.cash.barber/-barber-exception/to-string/","text":"barber / app.cash.barber / BarberException / toString toString \u00b6 fun toString(): String","title":"To string"},{"location":"0.x/barber/app.cash.barber/-barber-exception/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/barber/app.cash.barber/-barbershop/","text":"barber / app.cash.barber / Barbershop Barbershop \u00b6 interface Barbershop Holds validated elements that have eagerly built Barbers between type DocumentData and Document Types \u00b6 Name Summary Builder interface Builder Functions \u00b6 Name Summary getAllBarbers abstract fun getAllBarbers(): Map < BarberKey , Barber < DocumentData , Document >> getBarber abstract fun <DD : DocumentData , D : Document > getBarber(documentDataClass: KClass <out DD >, documentClass: KClass <out D >): Barber < DD , D > Extension Functions \u00b6 Name Summary getBarber fun <DD : DocumentData , D : Document > Barbershop .getBarber(): Barber < DD , D >","title":"Home"},{"location":"0.x/barber/app.cash.barber/-barbershop/#barbershop","text":"interface Barbershop Holds validated elements that have eagerly built Barbers between type DocumentData and Document","title":"Barbershop"},{"location":"0.x/barber/app.cash.barber/-barbershop/#types","text":"Name Summary Builder interface Builder","title":"Types"},{"location":"0.x/barber/app.cash.barber/-barbershop/#functions","text":"Name Summary getAllBarbers abstract fun getAllBarbers(): Map < BarberKey , Barber < DocumentData , Document >> getBarber abstract fun <DD : DocumentData , D : Document > getBarber(documentDataClass: KClass <out DD >, documentClass: KClass <out D >): Barber < DD , D >","title":"Functions"},{"location":"0.x/barber/app.cash.barber/-barbershop/#extension-functions","text":"Name Summary getBarber fun <DD : DocumentData , D : Document > Barbershop .getBarber(): Barber < DD , D >","title":"Extension Functions"},{"location":"0.x/barber/app.cash.barber/-barbershop/get-all-barbers/","text":"barber / app.cash.barber / Barbershop / getAllBarbers getAllBarbers \u00b6 abstract fun getAllBarbers(): Map < BarberKey , Barber < DocumentData , Document >>","title":"Get all barbers"},{"location":"0.x/barber/app.cash.barber/-barbershop/get-all-barbers/#getallbarbers","text":"abstract fun getAllBarbers(): Map < BarberKey , Barber < DocumentData , Document >>","title":"getAllBarbers"},{"location":"0.x/barber/app.cash.barber/-barbershop/get-barber/","text":"barber / app.cash.barber / Barbershop / getBarber getBarber \u00b6 abstract fun <DD : DocumentData , D : Document > getBarber(documentDataClass: KClass <out DD >, documentClass: KClass <out D >): Barber < DD , D >","title":"Get barber"},{"location":"0.x/barber/app.cash.barber/-barbershop/get-barber/#getbarber","text":"abstract fun <DD : DocumentData , D : Document > getBarber(documentDataClass: KClass <out DD >, documentClass: KClass <out D >): Barber < DD , D >","title":"getBarber"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/","text":"barber / app.cash.barber / Barbershop / Builder Builder \u00b6 interface Builder Functions \u00b6 Name Summary build abstract fun build(): Barbershop Validates BarbershopBuilder inputs and returns a Barbershop instance with the installed and validated elements installDocument abstract fun installDocument(document: KClass <out Document >): Builder Consumes a Document and persists in-memory At boot, a service will call installDocument on all Document to add to the in-memory Barbershop instance installDocumentTemplate abstract fun installDocumentTemplate(documentDataClass: KClass <out DocumentData >, documentTemplate: DocumentTemplate ): Builder Consumes a DocumentData and corresponding DocumentTemplate and persists in-memory At boot, a service will call installDocumentTemplate on all DocumentData and DocumentTemplate to add to the in-memory Barbershop setLocaleResolver abstract fun setLocaleResolver(resolver: LocaleResolver ): Builder Set a LocaleResolver to be used when resolving a localized DocumentTemplate . Default: MatchOrFirstLocaleResolver . Inheritors \u00b6 Name Summary BarbershopBuilder class BarbershopBuilder : Builder","title":"Home"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/#builder","text":"interface Builder","title":"Builder"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/#functions","text":"Name Summary build abstract fun build(): Barbershop Validates BarbershopBuilder inputs and returns a Barbershop instance with the installed and validated elements installDocument abstract fun installDocument(document: KClass <out Document >): Builder Consumes a Document and persists in-memory At boot, a service will call installDocument on all Document to add to the in-memory Barbershop instance installDocumentTemplate abstract fun installDocumentTemplate(documentDataClass: KClass <out DocumentData >, documentTemplate: DocumentTemplate ): Builder Consumes a DocumentData and corresponding DocumentTemplate and persists in-memory At boot, a service will call installDocumentTemplate on all DocumentData and DocumentTemplate to add to the in-memory Barbershop setLocaleResolver abstract fun setLocaleResolver(resolver: LocaleResolver ): Builder Set a LocaleResolver to be used when resolving a localized DocumentTemplate . Default: MatchOrFirstLocaleResolver .","title":"Functions"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/#inheritors","text":"Name Summary BarbershopBuilder class BarbershopBuilder : Builder","title":"Inheritors"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/build/","text":"barber / app.cash.barber / Barbershop / Builder / build build \u00b6 abstract fun build(): Barbershop Validates BarbershopBuilder inputs and returns a Barbershop instance with the installed and validated elements","title":"Build"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/build/#build","text":"abstract fun build(): Barbershop Validates BarbershopBuilder inputs and returns a Barbershop instance with the installed and validated elements","title":"build"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/install-document-template/","text":"barber / app.cash.barber / Barbershop / Builder / installDocumentTemplate installDocumentTemplate \u00b6 abstract fun installDocumentTemplate(documentDataClass: KClass <out DocumentData >, documentTemplate: DocumentTemplate ): Builder Consumes a DocumentData and corresponding DocumentTemplate and persists in-memory At boot, a service will call installDocumentTemplate on all DocumentData and DocumentTemplate to add to the in-memory Barbershop","title":"Install document template"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/install-document-template/#installdocumenttemplate","text":"abstract fun installDocumentTemplate(documentDataClass: KClass <out DocumentData >, documentTemplate: DocumentTemplate ): Builder Consumes a DocumentData and corresponding DocumentTemplate and persists in-memory At boot, a service will call installDocumentTemplate on all DocumentData and DocumentTemplate to add to the in-memory Barbershop","title":"installDocumentTemplate"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/install-document/","text":"barber / app.cash.barber / Barbershop / Builder / installDocument installDocument \u00b6 abstract fun installDocument(document: KClass <out Document >): Builder Consumes a Document and persists in-memory At boot, a service will call installDocument on all Document to add to the in-memory Barbershop instance","title":"Install document"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/install-document/#installdocument","text":"abstract fun installDocument(document: KClass <out Document >): Builder Consumes a Document and persists in-memory At boot, a service will call installDocument on all Document to add to the in-memory Barbershop instance","title":"installDocument"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/set-locale-resolver/","text":"barber / app.cash.barber / Barbershop / Builder / setLocaleResolver setLocaleResolver \u00b6 abstract fun setLocaleResolver(resolver: LocaleResolver ): Builder Set a LocaleResolver to be used when resolving a localized DocumentTemplate . Default: MatchOrFirstLocaleResolver .","title":"Set locale resolver"},{"location":"0.x/barber/app.cash.barber/-barbershop/-builder/set-locale-resolver/#setlocaleresolver","text":"abstract fun setLocaleResolver(resolver: LocaleResolver ): Builder Set a LocaleResolver to be used when resolving a localized DocumentTemplate . Default: MatchOrFirstLocaleResolver .","title":"setLocaleResolver"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/","text":"barber / app.cash.barber / BarbershopBuilder BarbershopBuilder \u00b6 class BarbershopBuilder : Builder Constructors \u00b6 Name Summary <init> BarbershopBuilder() Functions \u00b6 Name Summary build fun build(): Barbershop Validates BarbershopBuilder inputs and returns a Barbershop instance with the installed and validated elements installDocument fun installDocument(document: KClass <out Document >): BarbershopBuilder Consumes a Document and persists in-memory At boot, a service will call installDocument on all Document to add to the in-memory Barbershop instance fun <D : Document > installDocument(): BarbershopBuilder installDocumentTemplate fun installDocumentTemplate(documentDataClass: KClass <out DocumentData >, documentTemplate: DocumentTemplate ): BarbershopBuilder Consumes a DocumentData and corresponding DocumentTemplate and persists in-memory At boot, a service will call installDocumentTemplate on all DocumentData and DocumentTemplate to add to the in-memory Barbershop fun <DD : DocumentData > installDocumentTemplate(documentTemplate: DocumentTemplate ): BarbershopBuilder setLocaleResolver fun setLocaleResolver(resolver: LocaleResolver ): Builder Set a LocaleResolver to be used when resolving a localized DocumentTemplate . Default: MatchOrFirstLocaleResolver .","title":"Home"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/#barbershopbuilder","text":"class BarbershopBuilder : Builder","title":"BarbershopBuilder"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/#constructors","text":"Name Summary <init> BarbershopBuilder()","title":"Constructors"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/#functions","text":"Name Summary build fun build(): Barbershop Validates BarbershopBuilder inputs and returns a Barbershop instance with the installed and validated elements installDocument fun installDocument(document: KClass <out Document >): BarbershopBuilder Consumes a Document and persists in-memory At boot, a service will call installDocument on all Document to add to the in-memory Barbershop instance fun <D : Document > installDocument(): BarbershopBuilder installDocumentTemplate fun installDocumentTemplate(documentDataClass: KClass <out DocumentData >, documentTemplate: DocumentTemplate ): BarbershopBuilder Consumes a DocumentData and corresponding DocumentTemplate and persists in-memory At boot, a service will call installDocumentTemplate on all DocumentData and DocumentTemplate to add to the in-memory Barbershop fun <DD : DocumentData > installDocumentTemplate(documentTemplate: DocumentTemplate ): BarbershopBuilder setLocaleResolver fun setLocaleResolver(resolver: LocaleResolver ): Builder Set a LocaleResolver to be used when resolving a localized DocumentTemplate . Default: MatchOrFirstLocaleResolver .","title":"Functions"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/-init-/","text":"barber / app.cash.barber / BarbershopBuilder / <init> <init> \u00b6 BarbershopBuilder()","title":" init "},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/-init-/#init","text":"BarbershopBuilder()","title":"&lt;init&gt;"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/build/","text":"barber / app.cash.barber / BarbershopBuilder / build build \u00b6 fun build(): Barbershop Overrides Builder.build Validates BarbershopBuilder inputs and returns a Barbershop instance with the installed and validated elements","title":"Build"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/build/#build","text":"fun build(): Barbershop Overrides Builder.build Validates BarbershopBuilder inputs and returns a Barbershop instance with the installed and validated elements","title":"build"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/install-document-template/","text":"barber / app.cash.barber / BarbershopBuilder / installDocumentTemplate installDocumentTemplate \u00b6 fun installDocumentTemplate(documentDataClass: KClass <out DocumentData >, documentTemplate: DocumentTemplate ): BarbershopBuilder Overrides Builder.installDocumentTemplate Consumes a DocumentData and corresponding DocumentTemplate and persists in-memory At boot, a service will call installDocumentTemplate on all DocumentData and DocumentTemplate to add to the in-memory Barbershop inline fun <reified DD : DocumentData > installDocumentTemplate(documentTemplate: DocumentTemplate ): BarbershopBuilder","title":"Install document template"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/install-document-template/#installdocumenttemplate","text":"fun installDocumentTemplate(documentDataClass: KClass <out DocumentData >, documentTemplate: DocumentTemplate ): BarbershopBuilder Overrides Builder.installDocumentTemplate Consumes a DocumentData and corresponding DocumentTemplate and persists in-memory At boot, a service will call installDocumentTemplate on all DocumentData and DocumentTemplate to add to the in-memory Barbershop inline fun <reified DD : DocumentData > installDocumentTemplate(documentTemplate: DocumentTemplate ): BarbershopBuilder","title":"installDocumentTemplate"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/install-document/","text":"barber / app.cash.barber / BarbershopBuilder / installDocument installDocument \u00b6 fun installDocument(document: KClass <out Document >): BarbershopBuilder Overrides Builder.installDocument Consumes a Document and persists in-memory At boot, a service will call installDocument on all Document to add to the in-memory Barbershop instance inline fun <reified D : Document > installDocument(): BarbershopBuilder","title":"Install document"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/install-document/#installdocument","text":"fun installDocument(document: KClass <out Document >): BarbershopBuilder Overrides Builder.installDocument Consumes a Document and persists in-memory At boot, a service will call installDocument on all Document to add to the in-memory Barbershop instance inline fun <reified D : Document > installDocument(): BarbershopBuilder","title":"installDocument"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/set-locale-resolver/","text":"barber / app.cash.barber / BarbershopBuilder / setLocaleResolver setLocaleResolver \u00b6 fun setLocaleResolver(resolver: LocaleResolver ): Builder Overrides Builder.setLocaleResolver Set a LocaleResolver to be used when resolving a localized DocumentTemplate . Default: MatchOrFirstLocaleResolver .","title":"Set locale resolver"},{"location":"0.x/barber/app.cash.barber/-barbershop-builder/set-locale-resolver/#setlocaleresolver","text":"fun setLocaleResolver(resolver: LocaleResolver ): Builder Overrides Builder.setLocaleResolver Set a LocaleResolver to be used when resolving a localized DocumentTemplate . Default: MatchOrFirstLocaleResolver .","title":"setLocaleResolver"},{"location":"0.x/barber/app.cash.barber/-locale-resolver/","text":"barber / app.cash.barber / LocaleResolver LocaleResolver \u00b6 interface LocaleResolver Functions \u00b6 Name Summary resolve abstract fun resolve(locale: Locale , options: Set < Locale >): Locale Companion Object Functions \u00b6 Name Summary resolveEntry fun <T> Map < Locale , T ?>.resolveEntry(localeResolver: LocaleResolver , locale: Locale ): T Inheritors \u00b6 Name Summary MatchOrFirstLocaleResolver class MatchOrFirstLocaleResolver : LocaleResolver","title":"Home"},{"location":"0.x/barber/app.cash.barber/-locale-resolver/#localeresolver","text":"interface LocaleResolver","title":"LocaleResolver"},{"location":"0.x/barber/app.cash.barber/-locale-resolver/#functions","text":"Name Summary resolve abstract fun resolve(locale: Locale , options: Set < Locale >): Locale","title":"Functions"},{"location":"0.x/barber/app.cash.barber/-locale-resolver/#companion-object-functions","text":"Name Summary resolveEntry fun <T> Map < Locale , T ?>.resolveEntry(localeResolver: LocaleResolver , locale: Locale ): T","title":"Companion Object Functions"},{"location":"0.x/barber/app.cash.barber/-locale-resolver/#inheritors","text":"Name Summary MatchOrFirstLocaleResolver class MatchOrFirstLocaleResolver : LocaleResolver","title":"Inheritors"},{"location":"0.x/barber/app.cash.barber/-locale-resolver/resolve-entry/","text":"barber / app.cash.barber / LocaleResolver / resolveEntry resolveEntry \u00b6 fun <T> Map < Locale , T ?>.resolveEntry(localeResolver: LocaleResolver , locale: Locale ): T Return entry of a Locale keyed Map using LocaleResolver","title":"Resolve entry"},{"location":"0.x/barber/app.cash.barber/-locale-resolver/resolve-entry/#resolveentry","text":"fun <T> Map < Locale , T ?>.resolveEntry(localeResolver: LocaleResolver , locale: Locale ): T Return entry of a Locale keyed Map using LocaleResolver","title":"resolveEntry"},{"location":"0.x/barber/app.cash.barber/-locale-resolver/resolve/","text":"barber / app.cash.barber / LocaleResolver / resolve resolve \u00b6 abstract fun resolve(locale: Locale , options: Set < Locale >): Locale Parameters \u00b6 options - must be valid keys for a Locale keyed Map Return a Locale from the given options","title":"Resolve"},{"location":"0.x/barber/app.cash.barber/-locale-resolver/resolve/#resolve","text":"abstract fun resolve(locale: Locale , options: Set < Locale >): Locale","title":"resolve"},{"location":"0.x/barber/app.cash.barber/-locale-resolver/resolve/#parameters","text":"options - must be valid keys for a Locale keyed Map Return a Locale from the given options","title":"Parameters"},{"location":"0.x/barber/app.cash.barber/-match-or-first-locale-resolver/","text":"barber / app.cash.barber / MatchOrFirstLocaleResolver MatchOrFirstLocaleResolver \u00b6 class MatchOrFirstLocaleResolver : LocaleResolver Constructors \u00b6 Name Summary <init> MatchOrFirstLocaleResolver() Functions \u00b6 Name Summary resolve fun resolve(locale: Locale , options: Set < Locale >): Locale","title":"Home"},{"location":"0.x/barber/app.cash.barber/-match-or-first-locale-resolver/#matchorfirstlocaleresolver","text":"class MatchOrFirstLocaleResolver : LocaleResolver","title":"MatchOrFirstLocaleResolver"},{"location":"0.x/barber/app.cash.barber/-match-or-first-locale-resolver/#constructors","text":"Name Summary <init> MatchOrFirstLocaleResolver()","title":"Constructors"},{"location":"0.x/barber/app.cash.barber/-match-or-first-locale-resolver/#functions","text":"Name Summary resolve fun resolve(locale: Locale , options: Set < Locale >): Locale","title":"Functions"},{"location":"0.x/barber/app.cash.barber/-match-or-first-locale-resolver/-init-/","text":"barber / app.cash.barber / MatchOrFirstLocaleResolver / <init> <init> \u00b6 MatchOrFirstLocaleResolver()","title":" init "},{"location":"0.x/barber/app.cash.barber/-match-or-first-locale-resolver/-init-/#init","text":"MatchOrFirstLocaleResolver()","title":"&lt;init&gt;"},{"location":"0.x/barber/app.cash.barber/-match-or-first-locale-resolver/resolve/","text":"barber / app.cash.barber / MatchOrFirstLocaleResolver / resolve resolve \u00b6 fun resolve(locale: Locale , options: Set < Locale >): Locale Overrides LocaleResolver.resolve Parameters \u00b6 options - must be valid keys for a Locale keyed Map Return a Locale from the given options","title":"Resolve"},{"location":"0.x/barber/app.cash.barber/-match-or-first-locale-resolver/resolve/#resolve","text":"fun resolve(locale: Locale , options: Set < Locale >): Locale Overrides LocaleResolver.resolve","title":"resolve"},{"location":"0.x/barber/app.cash.barber/-match-or-first-locale-resolver/resolve/#parameters","text":"options - must be valid keys for a Locale keyed Map Return a Locale from the given options","title":"Parameters"},{"location":"0.x/barber/app.cash.barber/-real-barber/","text":"barber / app.cash.barber / RealBarber RealBarber \u00b6 class RealBarber<C : DocumentData , D : Document > : Barber < C , D > Constructors \u00b6 Name Summary <init> RealBarber(documentConstructor: KFunction < D >, documentParametersByName: Map < String ?, KParameter >, compiledDocumentTemplateLocales: Map < Locale , CompiledDocumentTemplate >, localeResolver: LocaleResolver ) Functions \u00b6 Name Summary render fun render(documentData: C , locale: Locale ): D","title":"Home"},{"location":"0.x/barber/app.cash.barber/-real-barber/#realbarber","text":"class RealBarber<C : DocumentData , D : Document > : Barber < C , D >","title":"RealBarber"},{"location":"0.x/barber/app.cash.barber/-real-barber/#constructors","text":"Name Summary <init> RealBarber(documentConstructor: KFunction < D >, documentParametersByName: Map < String ?, KParameter >, compiledDocumentTemplateLocales: Map < Locale , CompiledDocumentTemplate >, localeResolver: LocaleResolver )","title":"Constructors"},{"location":"0.x/barber/app.cash.barber/-real-barber/#functions","text":"Name Summary render fun render(documentData: C , locale: Locale ): D","title":"Functions"},{"location":"0.x/barber/app.cash.barber/-real-barber/-init-/","text":"barber / app.cash.barber / RealBarber / <init> <init> \u00b6 RealBarber(documentConstructor: KFunction < D >, documentParametersByName: Map < String ?, KParameter >, compiledDocumentTemplateLocales: Map < Locale , CompiledDocumentTemplate >, localeResolver: LocaleResolver )","title":" init "},{"location":"0.x/barber/app.cash.barber/-real-barber/-init-/#init","text":"RealBarber(documentConstructor: KFunction < D >, documentParametersByName: Map < String ?, KParameter >, compiledDocumentTemplateLocales: Map < Locale , CompiledDocumentTemplate >, localeResolver: LocaleResolver )","title":"&lt;init&gt;"},{"location":"0.x/barber/app.cash.barber/-real-barber/render/","text":"barber / app.cash.barber / RealBarber / render render \u00b6 fun render(documentData: C , locale: Locale ): D Overrides Barber.render Return a Document with the values of a DocumentData instance rendered in the DocumentTemplate","title":"Render"},{"location":"0.x/barber/app.cash.barber/-real-barber/render/#render","text":"fun render(documentData: C , locale: Locale ): D Overrides Barber.render Return a Document with the values of a DocumentData instance rendered in the DocumentTemplate","title":"render"},{"location":"0.x/barber/app.cash.barber.models/","text":"barber / app.cash.barber.models Package app.cash.barber.models \u00b6 Types \u00b6 Name Summary BarberKey data class BarberKey CompiledDocumentTemplate data class CompiledDocumentTemplate An intermediary data class used in processing DocumentTemplate that permits for null values in fields and pre-compilation of Mustache templates in fields. This allows for a CompiledDocumentTemplate .fields to contain the same keys as the target Document (even for Document keys that are nullable) and improve Mustache execution runtime. Document interface Document This is a UI object that has the user-presented strings of a document. DocumentData interface DocumentData This is a schema that specifies the input values for a DocumentTemplate template. DocumentTemplate data class DocumentTemplate For each DocumentData we have a DocumentTemplate that provides a natural language for the document. It uses Mustache templates to provide openings for the DocumentData fields. HtmlString data class HtmlString A wrapper around a String that contains HTML content that should not be escaped when rendered By default and for safety, all Strings are escaped. Locale data class Locale Container for locale string Also has aliases for easier locale use in code","title":"Home"},{"location":"0.x/barber/app.cash.barber.models/#package-appcashbarbermodels","text":"","title":"Package app.cash.barber.models"},{"location":"0.x/barber/app.cash.barber.models/#types","text":"Name Summary BarberKey data class BarberKey CompiledDocumentTemplate data class CompiledDocumentTemplate An intermediary data class used in processing DocumentTemplate that permits for null values in fields and pre-compilation of Mustache templates in fields. This allows for a CompiledDocumentTemplate .fields to contain the same keys as the target Document (even for Document keys that are nullable) and improve Mustache execution runtime. Document interface Document This is a UI object that has the user-presented strings of a document. DocumentData interface DocumentData This is a schema that specifies the input values for a DocumentTemplate template. DocumentTemplate data class DocumentTemplate For each DocumentData we have a DocumentTemplate that provides a natural language for the document. It uses Mustache templates to provide openings for the DocumentData fields. HtmlString data class HtmlString A wrapper around a String that contains HTML content that should not be escaped when rendered By default and for safety, all Strings are escaped. Locale data class Locale Container for locale string Also has aliases for easier locale use in code","title":"Types"},{"location":"0.x/barber/app.cash.barber.models/-document-data/","text":"barber / app.cash.barber.models / DocumentData DocumentData \u00b6 interface DocumentData This is a schema that specifies the input values for a DocumentTemplate template. Examples: data class RecipientReceipt( val amount: Money, val sender: String, val depositExpectedAt: Instant, val cancelUrl: HttpUrl ) : DocumentData data class AutoAddCashFailed( val amount: Money, val reason: String ) : DocumentData data class PaymentLateHelpArticle( val amount: Money, val displayId: String, val depositExpectedAt: Instant ) : DocumentData Instances of DocumentData are used to fill the templates in a DocumentTemplate and produce a Document object. A Barber.render function consumes the Document object and renders the final document, SMS, email, or article. Copy models do not have a locale.","title":" document data"},{"location":"0.x/barber/app.cash.barber.models/-document-data/#documentdata","text":"interface DocumentData This is a schema that specifies the input values for a DocumentTemplate template. Examples: data class RecipientReceipt( val amount: Money, val sender: String, val depositExpectedAt: Instant, val cancelUrl: HttpUrl ) : DocumentData data class AutoAddCashFailed( val amount: Money, val reason: String ) : DocumentData data class PaymentLateHelpArticle( val amount: Money, val displayId: String, val depositExpectedAt: Instant ) : DocumentData Instances of DocumentData are used to fill the templates in a DocumentTemplate and produce a Document object. A Barber.render function consumes the Document object and renders the final document, SMS, email, or article. Copy models do not have a locale.","title":"DocumentData"},{"location":"0.x/barber/app.cash.barber.models/-document/","text":"barber / app.cash.barber.models / Document Document \u00b6 interface Document This is a UI object that has the user-presented strings of a document. It is the output from a DocumentTemplate being rendered with the DocumentTemplate\u2019s corresponding input DocumentData. A Document is medium specific (email, SMS, article\u2026) and can either be the final rendered product (as in for SMS), or as the input object for a final rendering and theming step (HTML Mustache emails). Examples barber/test app.cash.barber.examples.TransactionalEmailDocument barber/test app.cash.barber.examples.TransactionalSmsDocument","title":" document"},{"location":"0.x/barber/app.cash.barber.models/-document/#document","text":"interface Document This is a UI object that has the user-presented strings of a document. It is the output from a DocumentTemplate being rendered with the DocumentTemplate\u2019s corresponding input DocumentData. A Document is medium specific (email, SMS, article\u2026) and can either be the final rendered product (as in for SMS), or as the input object for a final rendering and theming step (HTML Mustache emails). Examples barber/test app.cash.barber.examples.TransactionalEmailDocument barber/test app.cash.barber.examples.TransactionalSmsDocument","title":"Document"},{"location":"0.x/barber/app.cash.barber.models/-barber-key/","text":"barber / app.cash.barber.models / BarberKey BarberKey \u00b6 data class BarberKey Constructors \u00b6 Name Summary <init> BarberKey(documentData: KClass <out DocumentData >, document: KClass <out Document >) Properties \u00b6 Name Summary document val document: KClass <out Document > documentData val documentData: KClass <out DocumentData >","title":"Home"},{"location":"0.x/barber/app.cash.barber.models/-barber-key/#barberkey","text":"data class BarberKey","title":"BarberKey"},{"location":"0.x/barber/app.cash.barber.models/-barber-key/#constructors","text":"Name Summary <init> BarberKey(documentData: KClass <out DocumentData >, document: KClass <out Document >)","title":"Constructors"},{"location":"0.x/barber/app.cash.barber.models/-barber-key/#properties","text":"Name Summary document val document: KClass <out Document > documentData val documentData: KClass <out DocumentData >","title":"Properties"},{"location":"0.x/barber/app.cash.barber.models/-barber-key/-init-/","text":"barber / app.cash.barber.models / BarberKey / <init> <init> \u00b6 BarberKey(documentData: KClass <out DocumentData >, document: KClass <out Document >)","title":" init "},{"location":"0.x/barber/app.cash.barber.models/-barber-key/-init-/#init","text":"BarberKey(documentData: KClass <out DocumentData >, document: KClass <out Document >)","title":"&lt;init&gt;"},{"location":"0.x/barber/app.cash.barber.models/-barber-key/document-data/","text":"barber / app.cash.barber.models / BarberKey / documentData documentData \u00b6 val documentData: KClass <out DocumentData >","title":"Document data"},{"location":"0.x/barber/app.cash.barber.models/-barber-key/document-data/#documentdata","text":"val documentData: KClass <out DocumentData >","title":"documentData"},{"location":"0.x/barber/app.cash.barber.models/-barber-key/document/","text":"barber / app.cash.barber.models / BarberKey / document document \u00b6 val document: KClass <out Document >","title":"Document"},{"location":"0.x/barber/app.cash.barber.models/-barber-key/document/#document","text":"val document: KClass <out Document >","title":"document"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/","text":"barber / app.cash.barber.models / CompiledDocumentTemplate CompiledDocumentTemplate \u00b6 data class CompiledDocumentTemplate An intermediary data class used in processing DocumentTemplate that permits for null values in fields and pre-compilation of Mustache templates in fields. This allows for a CompiledDocumentTemplate .fields to contain the same keys as the target Document (even for Document keys that are nullable) and improve Mustache execution runtime. Constructors \u00b6 Name Summary <init> CompiledDocumentTemplate(fields: Map < String , Mustache?>, source: KClass <out DocumentData >, targets: Set < KClass <out Document >>, locale: Locale ) An intermediary data class used in processing DocumentTemplate that permits for null values in fields and pre-compilation of Mustache templates in fields. This allows for a CompiledDocumentTemplate .fields to contain the same keys as the target Document (even for Document keys that are nullable) and improve Mustache execution runtime. Properties \u00b6 Name Summary fields val fields: Map < String , Mustache?> locale val locale: Locale source val source: KClass <out DocumentData > targets val targets: Set < KClass <out Document >>","title":"Home"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/#compileddocumenttemplate","text":"data class CompiledDocumentTemplate An intermediary data class used in processing DocumentTemplate that permits for null values in fields and pre-compilation of Mustache templates in fields. This allows for a CompiledDocumentTemplate .fields to contain the same keys as the target Document (even for Document keys that are nullable) and improve Mustache execution runtime.","title":"CompiledDocumentTemplate"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/#constructors","text":"Name Summary <init> CompiledDocumentTemplate(fields: Map < String , Mustache?>, source: KClass <out DocumentData >, targets: Set < KClass <out Document >>, locale: Locale ) An intermediary data class used in processing DocumentTemplate that permits for null values in fields and pre-compilation of Mustache templates in fields. This allows for a CompiledDocumentTemplate .fields to contain the same keys as the target Document (even for Document keys that are nullable) and improve Mustache execution runtime.","title":"Constructors"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/#properties","text":"Name Summary fields val fields: Map < String , Mustache?> locale val locale: Locale source val source: KClass <out DocumentData > targets val targets: Set < KClass <out Document >>","title":"Properties"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/-init-/","text":"barber / app.cash.barber.models / CompiledDocumentTemplate / <init> <init> \u00b6 CompiledDocumentTemplate(fields: Map < String , Mustache?>, source: KClass <out DocumentData >, targets: Set < KClass <out Document >>, locale: Locale ) An intermediary data class used in processing DocumentTemplate that permits for null values in fields and pre-compilation of Mustache templates in fields. This allows for a CompiledDocumentTemplate .fields to contain the same keys as the target Document (even for Document keys that are nullable) and improve Mustache execution runtime.","title":" init "},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/-init-/#init","text":"CompiledDocumentTemplate(fields: Map < String , Mustache?>, source: KClass <out DocumentData >, targets: Set < KClass <out Document >>, locale: Locale ) An intermediary data class used in processing DocumentTemplate that permits for null values in fields and pre-compilation of Mustache templates in fields. This allows for a CompiledDocumentTemplate .fields to contain the same keys as the target Document (even for Document keys that are nullable) and improve Mustache execution runtime.","title":"&lt;init&gt;"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/fields/","text":"barber / app.cash.barber.models / CompiledDocumentTemplate / fields fields \u00b6 val fields: Map < String , Mustache?>","title":"Fields"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/fields/#fields","text":"val fields: Map < String , Mustache?>","title":"fields"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/locale/","text":"barber / app.cash.barber.models / CompiledDocumentTemplate / locale locale \u00b6 val locale: Locale","title":"Locale"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/locale/#locale","text":"val locale: Locale","title":"locale"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/source/","text":"barber / app.cash.barber.models / CompiledDocumentTemplate / source source \u00b6 val source: KClass <out DocumentData >","title":"Source"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/source/#source","text":"val source: KClass <out DocumentData >","title":"source"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/targets/","text":"barber / app.cash.barber.models / CompiledDocumentTemplate / targets targets \u00b6 val targets: Set < KClass <out Document >>","title":"Targets"},{"location":"0.x/barber/app.cash.barber.models/-compiled-document-template/targets/#targets","text":"val targets: Set < KClass <out Document >>","title":"targets"},{"location":"0.x/barber/app.cash.barber.models/-document-template/","text":"barber / app.cash.barber.models / DocumentTemplate DocumentTemplate \u00b6 data class DocumentTemplate For each DocumentData we have a DocumentTemplate that provides a natural language for the document. It uses Mustache templates to provide openings for the DocumentData fields. Each DocumentTemplate is specific to a locale. Parameters \u00b6 fields - Map of a Document output key to a template String value that can contain DocumentData input values source - KClass of DocumentData targets - Set of Documents that DocumentTemplate can render to locale - Barbershop.Locale that scopes DocumentTemplate to a languages/country Locale Constructors \u00b6 Name Summary <init> DocumentTemplate(fields: Map < String , String >, source: KClass <out DocumentData >, targets: Set < KClass <out Document >>, locale: Locale ) For each DocumentData we have a DocumentTemplate that provides a natural language for the document. It uses Mustache templates to provide openings for the DocumentData fields. Properties \u00b6 Name Summary fields val fields: Map < String , String > Map of a Document output key to a template String value that can contain DocumentData input values locale val locale: Locale Barbershop.Locale that scopes DocumentTemplate to a languages/country Locale source val source: KClass <out DocumentData > KClass of DocumentData targets val targets: Set < KClass <out Document >> Set of Documents that DocumentTemplate can render to","title":"Home"},{"location":"0.x/barber/app.cash.barber.models/-document-template/#documenttemplate","text":"data class DocumentTemplate For each DocumentData we have a DocumentTemplate that provides a natural language for the document. It uses Mustache templates to provide openings for the DocumentData fields. Each DocumentTemplate is specific to a locale.","title":"DocumentTemplate"},{"location":"0.x/barber/app.cash.barber.models/-document-template/#parameters","text":"fields - Map of a Document output key to a template String value that can contain DocumentData input values source - KClass of DocumentData targets - Set of Documents that DocumentTemplate can render to locale - Barbershop.Locale that scopes DocumentTemplate to a languages/country Locale","title":"Parameters"},{"location":"0.x/barber/app.cash.barber.models/-document-template/#constructors","text":"Name Summary <init> DocumentTemplate(fields: Map < String , String >, source: KClass <out DocumentData >, targets: Set < KClass <out Document >>, locale: Locale ) For each DocumentData we have a DocumentTemplate that provides a natural language for the document. It uses Mustache templates to provide openings for the DocumentData fields.","title":"Constructors"},{"location":"0.x/barber/app.cash.barber.models/-document-template/#properties","text":"Name Summary fields val fields: Map < String , String > Map of a Document output key to a template String value that can contain DocumentData input values locale val locale: Locale Barbershop.Locale that scopes DocumentTemplate to a languages/country Locale source val source: KClass <out DocumentData > KClass of DocumentData targets val targets: Set < KClass <out Document >> Set of Documents that DocumentTemplate can render to","title":"Properties"},{"location":"0.x/barber/app.cash.barber.models/-document-template/-init-/","text":"barber / app.cash.barber.models / DocumentTemplate / <init> <init> \u00b6 DocumentTemplate(fields: Map < String , String >, source: KClass <out DocumentData >, targets: Set < KClass <out Document >>, locale: Locale ) For each DocumentData we have a DocumentTemplate that provides a natural language for the document. It uses Mustache templates to provide openings for the DocumentData fields. Each DocumentTemplate is specific to a locale. Parameters \u00b6 fields - Map of a Document output key to a template String value that can contain DocumentData input values source - KClass of DocumentData targets - Set of Documents that DocumentTemplate can render to locale - Barbershop.Locale that scopes DocumentTemplate to a languages/country Locale","title":" init "},{"location":"0.x/barber/app.cash.barber.models/-document-template/-init-/#init","text":"DocumentTemplate(fields: Map < String , String >, source: KClass <out DocumentData >, targets: Set < KClass <out Document >>, locale: Locale ) For each DocumentData we have a DocumentTemplate that provides a natural language for the document. It uses Mustache templates to provide openings for the DocumentData fields. Each DocumentTemplate is specific to a locale.","title":"&lt;init&gt;"},{"location":"0.x/barber/app.cash.barber.models/-document-template/-init-/#parameters","text":"fields - Map of a Document output key to a template String value that can contain DocumentData input values source - KClass of DocumentData targets - Set of Documents that DocumentTemplate can render to locale - Barbershop.Locale that scopes DocumentTemplate to a languages/country Locale","title":"Parameters"},{"location":"0.x/barber/app.cash.barber.models/-document-template/fields/","text":"barber / app.cash.barber.models / DocumentTemplate / fields fields \u00b6 val fields: Map < String , String > Map of a Document output key to a template String value that can contain DocumentData input values","title":"Fields"},{"location":"0.x/barber/app.cash.barber.models/-document-template/fields/#fields","text":"val fields: Map < String , String > Map of a Document output key to a template String value that can contain DocumentData input values","title":"fields"},{"location":"0.x/barber/app.cash.barber.models/-document-template/locale/","text":"barber / app.cash.barber.models / DocumentTemplate / locale locale \u00b6 val locale: Locale Barbershop.Locale that scopes DocumentTemplate to a languages/country Locale","title":"Locale"},{"location":"0.x/barber/app.cash.barber.models/-document-template/locale/#locale","text":"val locale: Locale Barbershop.Locale that scopes DocumentTemplate to a languages/country Locale","title":"locale"},{"location":"0.x/barber/app.cash.barber.models/-document-template/source/","text":"barber / app.cash.barber.models / DocumentTemplate / source source \u00b6 val source: KClass <out DocumentData > KClass of DocumentData","title":"Source"},{"location":"0.x/barber/app.cash.barber.models/-document-template/source/#source","text":"val source: KClass <out DocumentData > KClass of DocumentData","title":"source"},{"location":"0.x/barber/app.cash.barber.models/-document-template/targets/","text":"barber / app.cash.barber.models / DocumentTemplate / targets targets \u00b6 val targets: Set < KClass <out Document >> Set of Documents that DocumentTemplate can render to","title":"Targets"},{"location":"0.x/barber/app.cash.barber.models/-document-template/targets/#targets","text":"val targets: Set < KClass <out Document >> Set of Documents that DocumentTemplate can render to","title":"targets"},{"location":"0.x/barber/app.cash.barber.models/-html-string/","text":"barber / app.cash.barber.models / HtmlString HtmlString \u00b6 data class HtmlString A wrapper around a String that contains HTML content that should not be escaped when rendered By default and for safety, all Strings are escaped. Constructors \u00b6 Name Summary <init> HtmlString(html: String ) A wrapper around a String that contains HTML content that should not be escaped when rendered By default and for safety, all Strings are escaped. Properties \u00b6 Name Summary html val html: String","title":"Home"},{"location":"0.x/barber/app.cash.barber.models/-html-string/#htmlstring","text":"data class HtmlString A wrapper around a String that contains HTML content that should not be escaped when rendered By default and for safety, all Strings are escaped.","title":"HtmlString"},{"location":"0.x/barber/app.cash.barber.models/-html-string/#constructors","text":"Name Summary <init> HtmlString(html: String ) A wrapper around a String that contains HTML content that should not be escaped when rendered By default and for safety, all Strings are escaped.","title":"Constructors"},{"location":"0.x/barber/app.cash.barber.models/-html-string/#properties","text":"Name Summary html val html: String","title":"Properties"},{"location":"0.x/barber/app.cash.barber.models/-html-string/-init-/","text":"barber / app.cash.barber.models / HtmlString / <init> <init> \u00b6 HtmlString(html: String ) A wrapper around a String that contains HTML content that should not be escaped when rendered By default and for safety, all Strings are escaped.","title":" init "},{"location":"0.x/barber/app.cash.barber.models/-html-string/-init-/#init","text":"HtmlString(html: String ) A wrapper around a String that contains HTML content that should not be escaped when rendered By default and for safety, all Strings are escaped.","title":"&lt;init&gt;"},{"location":"0.x/barber/app.cash.barber.models/-html-string/html/","text":"barber / app.cash.barber.models / HtmlString / html html \u00b6 val html: String","title":"Html"},{"location":"0.x/barber/app.cash.barber.models/-html-string/html/#html","text":"val html: String","title":"html"},{"location":"0.x/barber/app.cash.barber.models/-locale/","text":"barber / app.cash.barber.models / Locale Locale \u00b6 data class Locale Container for locale string Also has aliases for easier locale use in code Examples en-US: English US en-CA: English Canada fr-FR: French France fr-CA: French Canada Constructors \u00b6 Name Summary <init> Locale(locale: String ) Container for locale string Also has aliases for easier locale use in code Properties \u00b6 Name Summary locale val locale: String Companion Object Properties \u00b6 Name Summary EN_CA val EN_CA: Locale EN_GB val EN_GB: Locale EN_US val EN_US: Locale ES_SP val ES_SP: Locale ES_US val ES_US: Locale FR_CA val FR_CA: Locale FR_FR val FR_FR: Locale","title":"Home"},{"location":"0.x/barber/app.cash.barber.models/-locale/#locale","text":"data class Locale Container for locale string Also has aliases for easier locale use in code Examples en-US: English US en-CA: English Canada fr-FR: French France fr-CA: French Canada","title":"Locale"},{"location":"0.x/barber/app.cash.barber.models/-locale/#constructors","text":"Name Summary <init> Locale(locale: String ) Container for locale string Also has aliases for easier locale use in code","title":"Constructors"},{"location":"0.x/barber/app.cash.barber.models/-locale/#properties","text":"Name Summary locale val locale: String","title":"Properties"},{"location":"0.x/barber/app.cash.barber.models/-locale/#companion-object-properties","text":"Name Summary EN_CA val EN_CA: Locale EN_GB val EN_GB: Locale EN_US val EN_US: Locale ES_SP val ES_SP: Locale ES_US val ES_US: Locale FR_CA val FR_CA: Locale FR_FR val FR_FR: Locale","title":"Companion Object Properties"},{"location":"0.x/barber/app.cash.barber.models/-locale/-e-n_-c-a/","text":"barber / app.cash.barber.models / Locale / EN_CA EN_CA \u00b6 val EN_CA: Locale","title":" e n  c a"},{"location":"0.x/barber/app.cash.barber.models/-locale/-e-n_-c-a/#en_ca","text":"val EN_CA: Locale","title":"EN_CA"},{"location":"0.x/barber/app.cash.barber.models/-locale/-e-n_-g-b/","text":"barber / app.cash.barber.models / Locale / EN_GB EN_GB \u00b6 val EN_GB: Locale","title":" e n  g b"},{"location":"0.x/barber/app.cash.barber.models/-locale/-e-n_-g-b/#en_gb","text":"val EN_GB: Locale","title":"EN_GB"},{"location":"0.x/barber/app.cash.barber.models/-locale/-e-n_-u-s/","text":"barber / app.cash.barber.models / Locale / EN_US EN_US \u00b6 val EN_US: Locale","title":" e n  u s"},{"location":"0.x/barber/app.cash.barber.models/-locale/-e-n_-u-s/#en_us","text":"val EN_US: Locale","title":"EN_US"},{"location":"0.x/barber/app.cash.barber.models/-locale/-e-s_-s-p/","text":"barber / app.cash.barber.models / Locale / ES_SP ES_SP \u00b6 val ES_SP: Locale","title":" e s  s p"},{"location":"0.x/barber/app.cash.barber.models/-locale/-e-s_-s-p/#es_sp","text":"val ES_SP: Locale","title":"ES_SP"},{"location":"0.x/barber/app.cash.barber.models/-locale/-e-s_-u-s/","text":"barber / app.cash.barber.models / Locale / ES_US ES_US \u00b6 val ES_US: Locale","title":" e s  u s"},{"location":"0.x/barber/app.cash.barber.models/-locale/-e-s_-u-s/#es_us","text":"val ES_US: Locale","title":"ES_US"},{"location":"0.x/barber/app.cash.barber.models/-locale/-f-r_-c-a/","text":"barber / app.cash.barber.models / Locale / FR_CA FR_CA \u00b6 val FR_CA: Locale","title":" f r  c a"},{"location":"0.x/barber/app.cash.barber.models/-locale/-f-r_-c-a/#fr_ca","text":"val FR_CA: Locale","title":"FR_CA"},{"location":"0.x/barber/app.cash.barber.models/-locale/-f-r_-f-r/","text":"barber / app.cash.barber.models / Locale / FR_FR FR_FR \u00b6 val FR_FR: Locale","title":" f r  f r"},{"location":"0.x/barber/app.cash.barber.models/-locale/-f-r_-f-r/#fr_fr","text":"val FR_FR: Locale","title":"FR_FR"},{"location":"0.x/barber/app.cash.barber.models/-locale/-init-/","text":"barber / app.cash.barber.models / Locale / <init> <init> \u00b6 Locale(locale: String ) Container for locale string Also has aliases for easier locale use in code Examples en-US: English US en-CA: English Canada fr-FR: French France fr-CA: French Canada","title":" init "},{"location":"0.x/barber/app.cash.barber.models/-locale/-init-/#init","text":"Locale(locale: String ) Container for locale string Also has aliases for easier locale use in code Examples en-US: English US en-CA: English Canada fr-FR: French France fr-CA: French Canada","title":"&lt;init&gt;"},{"location":"0.x/barber/app.cash.barber.models/-locale/locale/","text":"barber / app.cash.barber.models / Locale / locale locale \u00b6 val locale: String","title":"Locale"},{"location":"0.x/barber/app.cash.barber.models/-locale/locale/#locale","text":"val locale: String","title":"locale"}]}